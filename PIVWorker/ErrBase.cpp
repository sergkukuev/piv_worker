#include "stdafx.h"
#include "ErrBase.h"

// Конструктор
CErrBase::CErrBase()
{
	// Установка корректных регулярок
	SetCorrect(NumWord, "^[0-9]+(,[ \t]?[0-9]*)?$");
	SetCorrect(TitleParam, "^[A-Za-z][A-Za-z0-9_]*$");
	SetCorrect(MinMaxCSR, "^-?[0-9]+,?[0-9]*$");
	SetCorrect(Bits, "^([0-9]+(…|(...))?[0-9]*)(,[ \t]?[0-9]+(…|(...))?[0-9]*)?$");

	// Установка набор ошибок
	// Для № слова
	AddError(NumWord, "(^$)", _T("Значение в поле отсутствует."));
	AddError(NumWord, "[^0-9, \t\n]+", _T("Поле содержит недопустимые символы."));
	AddError(NumWord, "[0-9]+[ \t]+[0-9]*", _T("Поле содержит лишние пробелы. Допускается только после запятой."));
	AddError(NumWord, "(,[ \t]?)+[0-9]*(,[ \t]?)+", _T("Значение в поле содержит более одной запятой."));
	AddError(NumWord, "^,[ \t]?[0-9]+$", _T("Отсутствует значение до запятой."));
	AddError(NumWord, "^[0-9]+,[ \t]?$", _T("Отсутствует значение после запятой."));
	AddError(NumWord, "^,[ \t]?$", _T("Отсутствуют значения до и после запятой."));
	//AddError(NumWord, "^([0-9]*[^0-9, \t\n]+[0-9]*)+,[ \t]?[0-9]+$", _T("Значение в поле содержит недопустимые символы до запятой."));	//??
	//AddError(NumWord, "^[0-9]+,[ \t]?([0-9]*[^0-9 \t\n]+[0-9]*)+", _T("Значение в поле содержит недопустимые символы после запятой."));	//??

	// Для обозначения сигнала
	AddError(TitleParam, "(^$)", _T("Значение в поле отсутствует."));
	AddError(TitleParam, "[ \t\n]+", _T("Значение в поле содержит пробел."));
	AddError(TitleParam, "^[^A-Za-z][A-Za-z0-9_]*$", _T("Значение в поле начинается не с латинской буквы."));
	AddError(TitleParam, "([A-Za-z0-9_]*[А-Яа-я]+[A-Za-z0-9_]*)+", _T("Значение в поле содержит кириллицу."));
	AddError(TitleParam, "_$", _T("Значение в поле заканчивается на '_'"));

	// Для мин, макс и цср
	AddError(MinMaxCSR, "(^$)", _T("Значение в поле отсутствует."));
	AddError(MinMaxCSR, "[^0-9, \t\n-]+", _T("Поле содержит недопустимые символы."));
	AddError(MinMaxCSR, "[ \t\n]+", _T("Поле содержит пробел."));
	AddError(MinMaxCSR, ",+[0-9-]*,+", _T("Значение в поле содержит более одной запятой."));	//??
	AddError(MinMaxCSR, "-+[0-9,]*-+", _T("Значение в поле содержит больше одного знака '-'."));	//??
	AddError(MinMaxCSR, "^[0-9,]+-", _T("Неправильная установка знака '-'. Он должен быть установлен в начале."));
	AddError(MinMaxCSR, "^-?,[0-9]*", _T("Отсутствует значение до запятой."));
	AddError(MinMaxCSR, "^-?[0-9]+,$", _T("Отсутствует значение после запятой."));		
	//AddError(MinMaxCSR, "^-?([0-9]*[^0-9]+[0-9]*),[0-9]+", _T("Значение в поле содержит недопустимые символы до запятой."));		// Нужны ли, если есть проверка на недопустимые символы
	//AddError(MinMaxCSR, "^-?[0-9]+,([0-9]*[^0-9]+[0-9]*)", _T("Значение в поле содержит недопустимые символы после запятой."));		//??

	// Для используемых битов
	AddError(Bits, "(^$)", _T("Значение в поле отсутствует."));
	AddError(Bits, "[^0-9., \t…]+", _T("Поле содержит недопустимые символы."));
	AddError(Bits, "[0-9.…]*[ \t]+[0-9.…]*", _T("Поле содержит лишние пробелы. Допускается только после запятой."));
	AddError(Bits, "[0-9]*..?[0-9]*", _T("Неверное обозначение промежутка."));
	AddError(Bits, "^(…|(...))[0-9]+", _T("Отсутствует значение в начале промежутка."));
	AddError(Bits, "[0-9]+(…|(...))$", _T("Отсутствует значение в конце промежутка."));

	AddError(Bits, "(,[ \t]?)+[0-9.…]*(,[ \t]?)+", _T("Значение в поле содержит более одной запятой."));
	//AddError(Bits, "", _T("Значение в поле содержит более двух промежутков."));			// ДОДЕЛАТЬ 
	AddError(Bits, "^[0-9]*..?[0-9]*,[ \t]?", _T("Неверное обозначение промежутка до запятой."));
	AddError(Bits, "^(…|(...))[0-9]+,[ \t]?", _T("Отсутствует значение в начале промежутка до запятой."));
	AddError(Bits, "^[0-9]+(…|(...)),[ \t]?", _T("Отсутствует значение в конце промежутка до запятой."));

	AddError(Bits, ",[ \t]?([0-9]*..?[0-9]*)$", _T("Неверное обозначение промежутка после запятой."));
	AddError(Bits, ",[ \t]?(…|(...))[0-9]+$", _T("Отсутствует значение в начале промежутка после запятой."));
	AddError(Bits, ",[ \t]?[0-9]+(…|(...))$", _T("Отсутствует значение в конце промежутка после запятой."));

	AddError(Bits, "[0-9]*..?[0-9]*,[ \t]?[0-9]*..?[0-9]*", _T("Неверное обозначение обоих промежутков."));
}

// Деструктор
CErrBase::~CErrBase()
{
	Clear(NumWord);
	Clear(TitleParam);
	Clear(MinMaxCSR);
	Clear(Bits);
}

// Установка регулярки для корректного поля
void CErrBase::SetCorrect(errorData& err, string reg)
{
	regex temp(reg);

	err.correct = temp;
}

// Добавление ошибки к определенному набору
void CErrBase::AddError(errorData& err, string reg, CString msg)
{
	regex temp(reg);

	err.error.push_back(temp);
	err.description.push_back(msg);
}

// Очистка набор ошибок
void CErrBase::Clear(errorData& err)
{
	err.error.clear();
	err.description.clear();
}

// Получить набор для № слова
errorData CErrBase::getNumWord()
{
	return NumWord;
}

// Получить набор для идентификатора
errorData CErrBase::getTitleParam()
{
	return TitleParam;
}

// Получить набора для мин, макс и цср
errorData CErrBase::getMinMaxCSR()
{
	return MinMaxCSR;
}

// Получить набор для используемых битов
errorData CErrBase::getBits()
{
	return Bits;
}