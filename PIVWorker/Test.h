#pragma once

#include "StructPIV.h"
#include "Settings.h"
#include "MyException.h"

#include <regex>
#include <set>

#define MAX_BITS 32

// Повторения номеров слов(адресов) и битов
typedef struct
{
	int adr;	// Номер слова (адрес)
	vector <signalData*> signals;	// Указатели на сигналы с данным адресом
	vector <bool> bits;	// 0...MAX_BITS - присутствие битов
} repiter;

// Некорректные регулярные выражения
typedef struct
{
	string reg;		// Шаблон выражения
	CString desc;	// Замечание (дескриптор)
} regular;

// База регулярных выражений
typedef struct
{
	string correct;
	vector <regular> incorrect;
} regBase;

// Исключения
typedef struct
{
	set<CString> mkio;
	set<CString> arinc;
} exceptTitle;

class PIV_DECLARE CTest 
{
public:
	CTest();	// Конструктор
	~CTest();	// Деструктор

	// Запуск проверки на ошибки
	errorData Start(bookData& book);
	list <errorData> Start(list <bookData>& books);

private:
	bookData* book = nullptr;	// Указатель на текущую книгу
	sheetData* sheet = nullptr;	// Указатель на текущий лист
	exceptTitle exception;		// Множество исключений (задается в конструкторе)

	vector <repiter> repit;	// Сетка перекрытия битов (для одного листа)
	vector <regBase> base;	// База регулярных выражений
	const enum index {numword, title, value, bits, /*adress, */size};	// Индексы параметров в базе регулярных выражений (value = min, max, csr в одном флаконе)

	void Initialize();
	void GetErrors(vector <errorSignal>& syntax, vector <errorSignal>& simantic);	// Проверка листа на синтаксические и семантические ошибки
	void GetWarnings(vector <errorSignal>& warning);	// Проверка листа на незначительные ошибки (замечания) 
	bool WriteError(errorSignal& signal, CString msg, const int& index);	// Запись ошибки 

	// Syntax
	void SyntaxChecker(errorSignal& signal, const int& index);	// Проверка всех параметров сигнала на синтаксические ошибки
	bool TemplateTest(const CString& field, const int& check, const int& index, errorSignal& signal); // Проверка шаблоном
	bool NpTest(vector <errorSignal>& signals);	// Проверка номера набора параметров
	bool SimpleTest(errorSignal& signal);		// Простая проверка флагов всех числовых параметров

	// Simantic
	void SimanticCheker(errorSignal& signal, const int& index, vector <repiter>& repit);	// Проверка всех параметров сигнала на семантические ошибки
	bool ValueTest(errorSignal& signal);	// Проверка всех числовых параметров
	bool TitleRepitTest(errorSignal& signal, const int& index);	// Поиск повторений идентификатора на листе
	bool PartTest(errorSignal& signal);	// Проверка двойного слова (КПРНО35)
	bool BitsTest(errorSignal& signal);	// Проверка используемых разрядов
	bool CheckReplace(CString title, const vector <signalData*> signals);	// Проверка слов, которые выборочно кладутся в одно слово 
	vector<int> CrossBits(const vector <int>& bits, const vector <int>& numWord);		// Проверка перекрытия битов
	
	// Repiter
	void InitRepiter();		// Инициализация репитера для проверки перекрытия битов
	void ClearRepiter();	// Очистка репитера
	void AddRepiter(const int& numWord, const int& index);	// Добавление нового номера слова (адреса) в сетку
	int GetIndexRepiter(const int& numWord);	// Получить индекс сетки битов по номеру слова (в случае неудачи возвр. индекс, иначе -1)
	
	// Замечания
	void FindRepiteTitleInBook(errorSignal& signal, const int& index);	// Поиск повторений идентификатора в книге
};